/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DijkstraJApplet.java
 *
 * Created on Apr 29, 2011, 5:16:55 AM
 */
/**
 *
 * @author Linh
 */

package dijkstra;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JApplet;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class DijkstraJApplet extends JApplet {

    /** Initializes the applet DijkstraJApplet */
    @Override
    public void init() {
	try {
	    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
	} catch (Exception ex) {
	    
	}
	SwingUtilities.updateComponentTreeUI(this);
	super.init();
	try {
	    java.awt.EventQueue.invokeAndWait(new Runnable() {

		@Override
		public void run() {
		    initComponents();
		}
	    });
	} catch (Exception ex) {
	}
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSaveFileChooser = new javax.swing.JFileChooser();
        jOpenFileChooser = new javax.swing.JFileChooser();
        pnButton = new javax.swing.JPanel();
        btnNode = new javax.swing.JButton();
        btnLink = new javax.swing.JButton();
        btnSource = new javax.swing.JButton();
        btnDest = new javax.swing.JButton();
        btnStep = new javax.swing.JButton();
        btnSolve = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        /*
        pnGraph = new javax.swing.JPanel();
        */this.pnGraph = new jGraphPanel();
        jTextStatus = new javax.swing.JTextField();
        jRandomCheck = new javax.swing.JCheckBox();
        /*
        pnHeap = new javax.swing.JPanel();
        */this.pnHeap = new jHeapPanel();
        jTextHeap = new javax.swing.JLabel();
        pnSolution = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSolution = new javax.swing.JTextArea();

        jSaveFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jSaveFileChooser.setFileFilter(new AppFilter());

        jOpenFileChooser.setCurrentDirectory(new java.io.File("C:\\"));
            jOpenFileChooser.setFileFilter(new AppFilter());
            jOpenFileChooser.getAccessibleContext().setAccessibleParent(this);

            pnButton.setMinimumSize(new java.awt.Dimension(90, 300));

            btnNode.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnNode.setText("Node");
            btnNode.setToolTipText("Add new node");
            btnNode.setDoubleBuffered(true);
            btnNode.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnNode.setMaximumSize(new java.awt.Dimension(20, 20));
            btnNode.setMinimumSize(new java.awt.Dimension(20, 20));
            btnNode.setPreferredSize(new java.awt.Dimension(70, 30));
            btnNode.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnNodeMouseClicked(evt);
                }
            });

            btnLink.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnLink.setText("Link");
            btnLink.setToolTipText("Add new edge");
            btnLink.setDoubleBuffered(true);
            btnLink.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnLink.setMaximumSize(new java.awt.Dimension(20, 20));
            btnLink.setMinimumSize(new java.awt.Dimension(20, 20));
            btnLink.setPreferredSize(new java.awt.Dimension(70, 30));
            btnLink.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnLinkMouseClicked(evt);
                }
            });
            btnLink.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnLinkActionPerformed(evt);
                }
            });

            btnSource.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnSource.setText("Source");
            btnSource.setToolTipText("Choose source node");
            btnSource.setDoubleBuffered(true);
            btnSource.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnSource.setMaximumSize(new java.awt.Dimension(20, 20));
            btnSource.setMinimumSize(new java.awt.Dimension(20, 20));
            btnSource.setPreferredSize(new java.awt.Dimension(70, 30));
            btnSource.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnSourceMouseClicked(evt);
                }
            });
            btnSource.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnSourceActionPerformed(evt);
                }
            });

            btnDest.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnDest.setText("Dest.");
            btnDest.setToolTipText("Choose end vertical");
            btnDest.setDoubleBuffered(true);
            btnDest.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnDest.setMaximumSize(new java.awt.Dimension(20, 20));
            btnDest.setMinimumSize(new java.awt.Dimension(20, 20));
            btnDest.setPreferredSize(new java.awt.Dimension(70, 30));
            btnDest.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnDestMouseClicked(evt);
                }
            });

            btnStep.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnStep.setText("Step");
            btnStep.setToolTipText("Run algorithm step by step");
            btnStep.setDoubleBuffered(true);
            btnStep.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnStep.setMaximumSize(new java.awt.Dimension(20, 20));
            btnStep.setMinimumSize(new java.awt.Dimension(20, 20));
            btnStep.setPreferredSize(new java.awt.Dimension(70, 30));
            btnStep.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnStepMouseClicked(evt);
                }
            });

            btnSolve.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnSolve.setText("Solve");
            btnSolve.setToolTipText("Solve current graph");
            btnSolve.setDoubleBuffered(true);
            btnSolve.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnSolve.setMaximumSize(new java.awt.Dimension(20, 20));
            btnSolve.setMinimumSize(new java.awt.Dimension(20, 20));
            btnSolve.setPreferredSize(new java.awt.Dimension(70, 30));
            btnSolve.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnSolveMouseClicked(evt);
                }
            });

            btnClear.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnClear.setText("Clear");
            btnClear.setToolTipText("Clear current graph");
            btnClear.setDoubleBuffered(true);
            btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
            btnClear.setMaximumSize(new java.awt.Dimension(20, 20));
            btnClear.setMinimumSize(new java.awt.Dimension(20, 20));
            btnClear.setPreferredSize(new java.awt.Dimension(70, 30));
            btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnClearMouseClicked(evt);
                }
            });

            btnSave.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnSave.setText("Save");
            btnSave.setDoubleBuffered(true);
            btnSave.setMaximumSize(new java.awt.Dimension(20, 20));
            btnSave.setMinimumSize(new java.awt.Dimension(20, 20));
            btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnSaveMouseClicked(evt);
                }
            });

            btnOpen.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            btnOpen.setText("Open");
            btnOpen.setDoubleBuffered(true);
            btnOpen.setMaximumSize(new java.awt.Dimension(20, 20));
            btnOpen.setMinimumSize(new java.awt.Dimension(20, 20));
            btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    btnOpenMouseClicked(evt);
                }
            });

            javax.swing.GroupLayout pnButtonLayout = new javax.swing.GroupLayout(pnButton);
            pnButton.setLayout(pnButtonLayout);
            pnButtonLayout.setHorizontalGroup(
                pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnButtonLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnStep, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSolve, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .addComponent(btnDest, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .addComponent(btnSource, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                        .addComponent(btnLink, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNode, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pnButtonLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClear, btnDest, btnLink, btnNode, btnOpen, btnSave, btnSolve, btnSource, btnStep});

            pnButtonLayout.setVerticalGroup(
                pnButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnButtonLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnNode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnDest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnSolve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnOpen, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addGap(29, 29, 29))
            );

            btnLink.getAccessibleContext().setAccessibleDescription("Add new metric");

            pnGraph.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 12))); // NOI18N
            pnGraph.setToolTipText("Graph design here");
            pnGraph.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            pnGraph.setMinimumSize(new java.awt.Dimension(600, 300));
            pnGraph.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    pnGraphMouseReleased(evt);
                }
            });
            pnGraph.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                public void mouseMoved(java.awt.event.MouseEvent evt) {
                    pnGraphMouseMoved(evt);
                }
            });

            jTextStatus.setEditable(false);
            jTextStatus.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
            jTextStatus.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextStatus.setAutoscrolls(false);
            jTextStatus.setBorder(null);

            jRandomCheck.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
            jRandomCheck.setSelected(true);
            jRandomCheck.setText("Random length");
            jRandomCheck.setToolTipText("Set random length for edge");
            jRandomCheck.setEnabled(false);

            javax.swing.GroupLayout pnGraphLayout = new javax.swing.GroupLayout(pnGraph);
            pnGraph.setLayout(pnGraphLayout);
            pnGraphLayout.setHorizontalGroup(
                pnGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnGraphLayout.createSequentialGroup()
                    .addContainerGap(430, Short.MAX_VALUE)
                    .addGroup(pnGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jRandomCheck, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap())
            );
            pnGraphLayout.setVerticalGroup(
                pnGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnGraphLayout.createSequentialGroup()
                    .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 479, Short.MAX_VALUE)
                    .addComponent(jRandomCheck)
                    .addContainerGap())
            );

            pnHeap.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Heap", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 12))); // NOI18N
            pnHeap.setToolTipText("Show fibonacci heap on solving");
            pnHeap.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            pnHeap.setMinimumSize(new java.awt.Dimension(400, 250));

            jTextHeap.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
            jTextHeap.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

            javax.swing.GroupLayout pnHeapLayout = new javax.swing.GroupLayout(pnHeap);
            pnHeap.setLayout(pnHeapLayout);
            pnHeapLayout.setHorizontalGroup(
                pnHeapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnHeapLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTextHeap, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addContainerGap())
            );
            pnHeapLayout.setVerticalGroup(
                pnHeapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnHeapLayout.createSequentialGroup()
                    .addComponent(jTextHeap, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pnSolution.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 12))); // NOI18N
            pnSolution.setToolTipText("Result will show here");
            pnSolution.setMinimumSize(new java.awt.Dimension(290, 250));

            jSolution.setEditable(false);
            jSolution.setColumns(20);
            jSolution.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
            jSolution.setLineWrap(true);
            jSolution.setRows(4);
            jSolution.setToolTipText("Result will show here");
            jSolution.setWrapStyleWord(true);
            jSolution.setBorder(null);
            jSolution.setEnabled(false);
            jSolution.setFocusable(false);
            jScrollPane1.setViewportView(jSolution);

            javax.swing.GroupLayout pnSolutionLayout = new javax.swing.GroupLayout(pnSolution);
            pnSolution.setLayout(pnSolutionLayout);
            pnSolutionLayout.setHorizontalGroup(
                pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            );
            pnSolutionLayout.setVerticalGroup(
                pnSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1)
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(pnHeap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(pnGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnHeap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pnSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void btnNodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNodeMouseClicked
	
	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.jTextStatus.setText("Draw a vertex");
	    this.jRandomCheck.setEnabled(false);
	    this.drawType = DrawType.VERTEXS;
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	} else {
	    this.jTextStatus.setText("Can't not add, solving...");
	}
}//GEN-LAST:event_btnNodeMouseClicked

    private void btnLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLinkMouseClicked
	
	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.jTextStatus.setText("Draw an edge");
	    this.jRandomCheck.setEnabled(true);
	    this.draw = false;
	    this.drawType = DrawType.EDGES;
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	} else {
	    this.jTextStatus.setText("Can't not add, solving...");
	}
}//GEN-LAST:event_btnLinkMouseClicked

    private void btnSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSourceMouseClicked
	
	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.jRandomCheck.setEnabled(false);
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	    if (this.sourceNode != null) {
		this.jTextStatus.setText("Starting vertex has been chosen");
		return;
	    }
	    this.jTextStatus.setText("Choose starting vertex");
	    this.start = true;
	} else
	    this.jTextStatus.setText("Can't not choose, solving...");
}//GEN-LAST:event_btnSourceMouseClicked

    private void btnDestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDestMouseClicked
	
	if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	    this.jRandomCheck.setEnabled(false);
	    if (this.destNode != null) {
		this.jTextStatus.setText("Ending vertex has been chosen");
		return;
	    }
	    this.jTextStatus.setText("Choose ending vertex");
	    this.end = true;
	} else {
	    this.jTextStatus.setText("Can't not choose, solving...");
	}
}//GEN-LAST:event_btnDestMouseClicked

    private void btnStepMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStepMouseClicked
	
	if (this.alState == StateAlgorithm.SOLVED) {
	    this.jTextStatus.setText("Solved");
	    return;
	} else if (this.alState == StateAlgorithm.LOCK) {
	    this.jTextStatus.setText("Solving...");
	    this.dijkstraAlgorithm();
	    this.showResult();
	} else if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	    this.jRandomCheck.setEnabled(false);
	    if (this.sourceNode == null) {
		this.jTextStatus.setText("Not chosen start vertex yet");
		return;
	    }
	    if (this.destNode == null) {
		this.jTextStatus.setText("Not chosen end vertex yet");
		return;
	    }
	    
	    this.jTextStatus.setText("Solving...");
	    this.pnHeap.heap = new FibonacciHeap();
	    this.pnHeap.heap.insertVertex(this.sourceNode);
	    this.alState = StateAlgorithm.LOCK;
	    this.dijkstraAlgorithm();
	    this.showResult();
	}
}//GEN-LAST:event_btnStepMouseClicked

    private void btnSolveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSolveMouseClicked
	
	if (this.alState == StateAlgorithm.SOLVED) {
	    this.jTextStatus.setText("Solved");
	    return;
	} else if (this.alState == StateAlgorithm.UNLOCK) {
	    this.drawType = DrawType.NODRAW;
	    this.start = false;
	    this.end = false;
	    this.pnGraph.mDrag = false;
	    this.pnGraph.repaint();
	    this.jRandomCheck.setEnabled(false);
	    if (this.sourceNode == null) {
		this.jTextStatus.setText("Not chosen start vertex yet");
		return;
	    }
	    if (this.destNode == null) {
		this.jTextStatus.setText("Not chosen end vertex yet");
		return;
	    }
	    this.pnHeap.heap = new FibonacciHeap();
	    this.pnHeap.heap.insertVertex(this.sourceNode);
	}
	while (this.alState != StateAlgorithm.SOLVED)
	    this.dijkstraAlgorithm();
	this.jTextStatus.setText("Solved");
	this.showResult();
}//GEN-LAST:event_btnSolveMouseClicked

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
	
	this.clearAll();
}//GEN-LAST:event_btnClearMouseClicked

    private void pnGraphMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnGraphMouseReleased
	
	int x = 0;
	int y = 0;
	Node vertex = null;
	if (this.drawType != DrawType.NODRAW || this.start || this.end) {
	    x = evt.getX() - jGraphPanel.radius/2;
	    y = evt.getY() - jGraphPanel.radius/2;
	    if (x < 0 || y < 0) {
		this.jTextStatus.setText("Invalid position");
		this.drawType = DrawType.NODRAW;
		return;
	    }
	    vertex = this.pnGraph.checkInLink(x, y);
	    if (vertex != null)
		if (vertex.state != State.LABELED)
		    if (this.start) {
			vertex.state = State.LABELED;
			vertex.setKey(0);
			this.sourceNode = vertex;
			this.jTextStatus.setText("");
			this.jSolution.append("Starting vertex\t: Vertex " + Integer.toString(vertex.getData()) + "\n");
			this.start = false;
		    } else if (this.end) {
			vertex.state = State.LABELED;
			this.destNode = vertex;
			this.jTextStatus.setText("");
			this.jSolution.append("Ending vertex\t: Vertex " + Integer.toString(vertex.getData()) + "\n");
			this.end = false;
		    }
	}
	
	if (this.drawType == DrawType.VERTEXS) {
	    if (vertex != null) {
		this.jTextStatus.setText("Concurred with another vertex");
	    } else {
		this.pnGraph.listNodes.add(new Node(x, y, this.numNodes, -1));
		this.numNodes++;
	    }
	} else if (this.drawType == DrawType.EDGES){
	    if (vertex == null)
		this.jTextStatus.setText("You must click on exist vertex");
	    else if (vertex == this.head)
		this.jTextStatus.setText("You must choose another vertex");
	    else {
		if (draw) {
		    this.pnGraph.mDrag = false;
		    this.pnGraph.head = null;
		    Link edge = new Link(this.head, vertex, 10);
		    edge.type = this.pnGraph.checkLink(this.head, vertex);
		    if (this.jRandomCheck.isSelected()) {
			Random random = new Random();
			edge.setMetric(random.nextInt(20));
		    } else
			edge.setMetric(Integer.parseInt(JOptionPane.showInputDialog(null, "Length of edge", "Edge", JOptionPane.QUESTION_MESSAGE)));
		    this.head.outgoingLinks.add(edge);
		    vertex.incomingLinks.add(edge);
		    this.pnGraph.listLinks.add(edge);
		    this.head = null;
		    this.jTextStatus.setText("Draw an edge");
		    this.draw = false;
		} else {
		    this.head = vertex;
		    this.pnGraph.head = vertex;
		    this.pnGraph.xM = evt.getX();
		    this.pnGraph.yM = evt.getY();
		    this.pnGraph.mDrag = true;
		    this.jTextStatus.setText("Choose tail vertex");
		    this.draw = true;
		}
	    }
	}
	this.pnGraph.repaint();
}//GEN-LAST:event_pnGraphMouseReleased

    private void pnGraphMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnGraphMouseMoved
	
	if (this.pnGraph.mDrag) {
	    this.pnGraph.xM = evt.getX();
	    this.pnGraph.yM = evt.getY();
	    this.pnGraph.repaint();
	}
}//GEN-LAST:event_pnGraphMouseMoved

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
	
	this.jTextStatus.setText("");
	if (this.pnGraph.listLinks.isEmpty() && this.pnGraph.listNodes.isEmpty()) {
	    this.jTextStatus.setText("Empty graph, not save");
	    return;
	}
	if (this.jSaveFileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
	    File file = this.jSaveFileChooser.getSelectedFile();
	    try {
		BufferedWriter output = new BufferedWriter(new FileWriter(file));
		try {
		    for (Node Vertex : this.pnGraph.listNodes) {
			output.write(String.format("Vertex:%d:%d:%d", Vertex.getData(), Vertex.getX_cor(), Vertex.getY_cor()));
			output.newLine();
		    }
		    for (Link edge : this.pnGraph.listLinks) {
			output.write(String.format("Edge:%d:%d:%d", edge.getHead().getData(), edge.getTail().getData(), edge.getMetric()));
			output.newLine();
		    }
		    this.jTextStatus.setText("Save graph successfully");
		} finally {
		    output.close();
		}
	    } catch (IOException e) {
	    }
	}
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseClicked
	
	this.jTextStatus.setText("");
	if (this.jOpenFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
	    File file = this.jOpenFileChooser.getSelectedFile();
	    this.clearAll();
	    try {
		BufferedReader input = new BufferedReader(new FileReader(file));
		try {
		    String line = null;
		    line = input.readLine();
		    while (line != null) {
			String splitLine[] = line.split(":");
			if (splitLine[0].equals("Vertex")) {
			    int d = Integer.parseInt(splitLine[1]);
			    int x = Integer.parseInt(splitLine[2]);
			    int y = Integer.parseInt(splitLine[3]);
			    this.pnGraph.listNodes.add(new Node(x, y, d, -1));
			} else if (splitLine[0].equals("Edge")) {
			    Node headVertex = this.pnGraph.listNodes.get(Integer.parseInt(splitLine[1]));
			    Node tailVertex = this.pnGraph.listNodes.get(Integer.parseInt(splitLine[2]));
			    int l = Integer.parseInt(splitLine[3]);
			    Link edge = new Link( headVertex, tailVertex, l);
			    edge.type = this.pnGraph.checkLink(headVertex, tailVertex);
			    headVertex.outgoingLinks.add(edge);
			    tailVertex.incomingLinks.add(edge);
			    this.pnGraph.listLinks.add(edge);
			}
			line = input.readLine();
		    }
		    this.jTextStatus.setText("Load graph successfully");
		} finally {
		    input.close();
		}
	    } catch (IOException e) {
	    }
	}
    }//GEN-LAST:event_btnOpenMouseClicked

    private void btnSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSourceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSourceActionPerformed

    private void btnLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLinkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLinkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDest;
    private javax.swing.JButton btnLink;
    private javax.swing.JButton btnNode;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSolve;
    private javax.swing.JButton btnSource;
    private javax.swing.JButton btnStep;
    private javax.swing.JFileChooser jOpenFileChooser;
    private javax.swing.JCheckBox jRandomCheck;
    private javax.swing.JFileChooser jSaveFileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jSolution;
    private javax.swing.JLabel jTextHeap;
    private javax.swing.JTextField jTextStatus;
    private javax.swing.JPanel pnButton;
    /*
    private javax.swing.JPanel pnGraph;
    */private jGraphPanel pnGraph;
    /*
    private javax.swing.JPanel pnHeap;
    */private jHeapPanel pnHeap;
    private javax.swing.JPanel pnSolution;
    // End of variables declaration//GEN-END:variables

    private int numNodes = 0;

    // for draw
    private boolean draw = false;
    private Node head = null;
    private DrawType drawType = DrawType.NODRAW;

    // for function choose start and end Node
    private boolean start = false;
    private boolean end = false;
    private Node sourceNode = null;
    private Node destNode = null;
    
    // for algorithm
    private StateAlgorithm alState = StateAlgorithm.UNLOCK;
    private Node curNode = null;
    private Link curLink = null;
    private int curPos = 0;

    private void clearAll() {
	this.pnGraph.listNodes.clear();
	this.pnGraph.listLinks.clear();
	this.pnGraph.showResult = false;
	this.pnGraph.mDrag = false;
	this.pnGraph.repaint();
	this.pnHeap.heap = null;
	this.pnHeap.repaint();
	this.jTextStatus.setText("");
	this.jTextHeap.setText("");
	this.jSolution.setText("");
	this.jRandomCheck.setEnabled(false);
	this.draw = false;
	this.end = false;
	this.start = false;
	this.head = null;
	this.sourceNode = null;
	this.destNode = null;
	this.numNodes = 0;
	this.drawType = DrawType.NODRAW;
	this.alState = StateAlgorithm.UNLOCK;
	this.curNode = null;
	this.curLink = null;
	this.curPos = 0;
    }

    private void dijkstraAlgorithm() {
	this.jTextHeap.setText("");
	// check solved
	if (this.alState == StateAlgorithm.SOLVED)
	    return;
	// first time run
	if (this.curNode == null) {
	    this.destNode.state = State.UNLABELED;
	    this.curNode = this.pnHeap.heap.deleteMin();
	    this.curNode.state = State.SCANNED;
	    this.curPos = 0;
	}
	int sz = this.curNode.outgoingLinks.size();
	if (this.curPos < sz) {
	    if (this.curLink != null)
		this.curLink.linkState = State.UNLABELED;
	    this.curLink = this.curNode.outgoingLinks.get(this.curPos);
	    this.curLink.linkState = State.SCANNED;
	    Node tailOfCurVertex = this.curLink.getTail();
	    
	    if (tailOfCurVertex.state != State.SCANNED) {
		if (tailOfCurVertex.state == State.UNLABELED) {
		    // insert a vertex with
		    tailOfCurVertex.state = State.LABELED;
		    tailOfCurVertex.setPred(this.curNode);
		    tailOfCurVertex.setKey(this.curNode.getKey() + this.curLink.getMetric());
		    this.pnHeap.heap.insertVertex(tailOfCurVertex);
		    this.jTextHeap.setText("Insert node " + Integer.toString(tailOfCurVertex.getData()));
		} else if (tailOfCurVertex.getKey() > this.curNode.getKey() + this.curLink.getMetric()) {
		    // decrease the key of a vertex with finite key
		    tailOfCurVertex.setPred(this.curNode);
		    this.jTextHeap.setText("Decrease key of node " + Integer.toString(tailOfCurVertex.getData())
			    + " from " + Double.toString(tailOfCurVertex.getKey())
			    + " to " + Double.toString(this.curNode.getKey() + this.curLink.getMetric()));
		    this.pnHeap.heap.decreaseKey(this.curNode.getKey() + this.curLink.getMetric(), tailOfCurVertex);
		}
	    }
	    // check next outgoing edge
	    this.curPos++;
	} else if (!this.pnHeap.heap.isEmpty()) {
	    this.curLink.linkState = State.UNLABELED;
	    this.curNode = this.pnHeap.heap.deleteMin();
	    this.jTextHeap.setText("Delete min node " + Integer.toString(this.curNode.getData()));
	    this.curNode.state = State.SCANNED;
	    this.curPos = 0;
	} else
	    this.alState = StateAlgorithm.SOLVED;
	this.pnHeap.repaint();
	this.pnGraph.repaint();
    }

    private void showResult() {
	if (this.alState != StateAlgorithm.SOLVED)
	    return;

	this.pnGraph.showResult = true;
	this.destNode.state = State.LABELED;
	this.sourceNode.state = State.LABELED;
	if (this.curLink != null)
	    this.curLink.linkState = State.UNLABELED;
	this.jTextStatus.setText("Solved");

  	if (this.destNode.getPred() == null)
	    this.jSolution.append("There is no shorttest path from vertex " + Integer.toString(this.sourceNode.getData())
			+ " to vertex " + Integer.toString(this.destNode.getData()) + "\n");
	else {
	    this.jSolution.append("Path:\n");
	    ArrayList<Node> result = new ArrayList<Node>();
	    Node tailN = this.destNode;
	    do {
		tailN.state = State.LABELED;
		result.add(tailN);
		Node headN = tailN.getPred();
		if (headN == null) break;
		tailN.getIncomingEdge(headN).linkState = State.LABELED;
		tailN = headN;
	    } while (tailN != null);
	    for (int i = result.size() - 1; i > 0; i--)
		this.jSolution.append("Node " + Integer.toString(result.get(i).getData()) + " -> ");
	    this.jSolution.append("Node " + Integer.toString(result.get(0).getData()) + "\n");
	    this.jSolution.append("\tDistance: " + Double.toString(this.destNode.getKey()));
	    this.pnGraph.repaint();
	    this.pnSolution.repaint();
	}
    }
    
}